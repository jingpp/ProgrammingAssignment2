find.package("devtools")
install.packages("swirl")
library("swirl")
swirl()
5+7
x <- 5+7
x
x <-3
x - 3
y <- x - 3
y
c(1.1,9,3,14)
z <- c(1.1, 9, 3, 14)
z <- c(1.1, 9, 3.14)
?c
z
c (z, 555, z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
my_recl <- c(1,2,3,4)+C(0,10)
my_recl <- c(1,2,3,4)+c(0,10)
c(1,2,3,4) + c(0,10)
c(1,2,3,4)+ c(0,10,100)
z*2 + 100
z*2 + 100
z*2 + 1000
my_div
swirl()
getwd()
ls()
x <- 9
ls
ls()
list.files()
dir()
?list.files
args(list.files)
old.dir <- "/Users/jingpp"
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
pwd
pwd()
gtwd()
gwd
gwd()
getwd()
file.create("mytest.R")
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.info("mytest.R")$mtime
file.rename("mytest.R", "mytest2.R")
file.ls
list.files()
file.copy("mytest2.R","mytest3.R")
play()
file.path("mytest3.R")
play("mytest3.R")
nxt()
file.path("mytest3.R")
file.path("folder1")
file.path("folder1","folder2")
list.files()
?dir.create
dir.create("testdir2")
dir.creat(file.path("testdir2",'testdir3'), recursive = TRUE)
dir.create(file.path("testdir2",'testdir3'), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
old.dir
setwd("/Users/jingpp")
setwd(old.dir)
list.files()
rm("testdir")
unlink("testdir", recursive = TRUE)
cwd
cwd()
swirl()
swril()
cube <- function(x,n) {
x^3
}
cube(3)
x <- 1:10
if(x >5) {
x<-0
}
f <- function(x) {
g <- function(y) {
y+z
}
z<- 4
x+g(x)
}
z<- 10
f(3)
?runif
?elt
m <- matrix(1:25,5,5)
f <- function(elt) {
elt[,1]
}
f(m)
m
l <- list(m, n = matrix(9:29,4,5))
l <- list(m, n = matrix(9:29,7,3))
lapply(l,f)
x <- matrix (rnorm(200), 20, 10)
x
apply(x, 2, mean)
?apply
x[,1]
x[1,]
quantile <- function(Row) {}
quantile(x[1,], 0.25, 0.75)
quantile(x[1,], probs = c(0.25, 0.75))
?quantile
quantile(x[1,], probs = seq(0.25, 0.75))
quantile(x[1,]
quantile(x[1,])
quantile(x[1,]))
quantile(x[1,])
quantile(x[1,])
row1 <- x[1,]
quantile(row1)
quantile(row1, 0.25)
quantile(row1, probs=(0.25,0.75))
quantile(row1, probs=(0,1,0.25))
quantile(row1, probs= seq(0,1,0.25))
apply(x,1,quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2*2*10), c(2,2,10))
a
apply(a,c(1,2),mean)
rowMean(a)
rowMeans(a)
rowMeans(a,dims = 2)
rowMeans(a, dims = 1)
rnorm(2*2*10)
array(rnorm(2*2*10),c(2,2,10))
c(2,2,10)
?array
array(rnorm(4*4*8),c(4,4,8))
x <- matrix(rnorm(200),20,10)
apply(x,1,quantile, probs= c(0.25,0.75))
x <- matrix(rnorm(200),20,10)
apply(x,1,quantile, probs= c(0.25,0.75))
?pro
?prob
probs
?probs
?quantile
quantile(x)
x<- matrix(1:40,5,8)
quantile(x)
quantile(x[1,])
x[1,]
quantile(c(1,2,3,4,5,6,7,8))
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(0.25, 0.75))
apply(x, 1, quantile, probs = seq(0.25, 0.75))
a <- array(rnorm(2*2*10), c(2,2,10))
apply(a,c(1,2),mean)
?array
colMeans(a, dims = 1)
apply(a, c(1),mean)
apply(a, c(1,2), mean)
apply(a, c(2,3), mean)
rowMeans(a,2)
rowMeans(a, dims=3)
rowMeans(a, dims=2)
rowMeans(a, dims=1)
apply(a, c(1,3), mean)
apply(a, c(1,2), mean)
swirl()
next()
swirl
?swirl
??swirl
library(swirl)
swirl()
head(flags)
0
exit()
exit
eacape
swirl()
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
uinque(c(3,4,5,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags[,1], unique)
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
saaply(unique_vals, length())
saaply(unique_vals, length
saaply(unique_vals, length)
saaply(unique_vals, length)
saply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, funciton(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
?noise
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5,1,2)
mapply(noise, 5, 1:5, 1)
mapply(noise, 5, 1:8, 1)
a <- mapply(noise, 5, 1:8, 1)
a[,1]
sd(a[,1])
sd(a[,4])
mean(a[,1])
mean(a[,4])
mean(a[,8])
mean(a[5,])
mean(a[4,])
mean(a[3,])
mean(a[2,])
mapply(noise, 5:10, 1:5, 2)
b <- mapply(noise, 5:10, 1:5, 2)
b[[1]]
sd(b[[2]])
sd(b[[1]])
sd(b[[3]])
mean(b[[1]])
mean(b[[2]])
mean(b[[3]])
mean(b[[4]])
mean(b[[5]])
?rnorm
?gl
x <- c(rnorm(10), runif(10), rnorm(10,2), rnorm(10,5,2))
f <- gl(4,10)
f
tapply(x, f, mean)
?runif
tapply(x,f,range)
swirl()
unique(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags&class)
table(flags&landmass)
table(flags$landmass)
?table
table(flags & language)
table(flags&language)
table(flags&zone)
landmass
table(flags$animate)
table(flags$colours)
tapply(flags&animate, flags&landmass, mean)
tapply(flags&animate, flags&landmass, mean)
tapply(flags&animate, 8, mean)
flags&animate
tapply(flags$animate, flags$landmass, mean
)
tapply(flags&population, flags&red, summary)
tapply(flags$population, flags$red, summary)
sapply(flags$population, flags$landmass, summary)
tapply(flags$population, flags$landmass, summary)
x <- c(rnorm(10), runif(10), rnorm(10,1)))
x <- c(rnorm(10), runif(10), rnorm(10,1))
split(x, gl(3,10))
$1
split <- split(x, gl(3,10))
split$'1'
library(datasets)
head(airquality)
airquality
s <- split(airquality, airquality$Month)
s
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
mean <- function(x) {
colMeans(x[, c("Ozone", "SOlar.R", "Wind")])
}
lapply(s, mean)
mean <- function(x) {
colMeans(x[, c("Ozone", "SOlar.R", "Wind")])
}
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]), na.rm=TRUE)
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]), na.rm=TRUE)
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
f1 <- gl(2, 5)
f2 <- gl(5, 2)
list(f1, f2)
interactin(f1, f2)
interaction(f1, f2)
split(x, list(f1, f2))
split(x, interaction(f1, f2))
str()
?str
str(split(x, list(f1,f2)))
split(x, interaction(f1, f2)), drop = TRUE
split(x, interaction(f1, f2), drop = TRUE)
log(-1)
?invisible
p1 <- function(x) {print(x)}
p2 <- function(x) {invisible(x)}
p1(4)
p2(4)
printmessage <- function(x) {
if(x>0)
print("x is larger than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage(NA)
printmessage <- function(x) {
if(is.na(x))
print("x is a missing value!")
else(x>0)
print("x is larger than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage <- function(x) {
if(is.na(x))
print("x is a missing value!")
else if(x>0)
print("x is larger than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(-1)
printmessage(NA)
printmessage(NaN)
debug(lm)
lm(y-x)
debug(lm)
lm(y-x)
options(error = recover)
read.csv("nosuchfiel")
library(datasets)
data(iris)
?iris
iris
iris[,"Sepal.Length"]
split(iris[,"Sepal.length"], Species)
split(iris, iris$Species)
split_species <- split(iris, iris$Species)
sapply(split_species$Sapal.Length, function(x) colMeans(x[Species]))
lapply(split(iris, iris$Species), mean)
split_species
lapply(ssplit_species, fucntion(x) colMeans(x[, "Species"]))
lapply(split_species, fucntion(x) colMeans(x[, "Species"]))
colMeans(split_species)
lapply(iris,mean)
2
3
4
tapply(iris, split_species, mean)
split_species
split_species$virginica
mean(split_species$virginica)
sapply(split_species$virginica, mean)
split_species$virginica
table(iris$Species)
library(datasets)
data("iris")
iris
tapply(iris, s, mean)
s <- split(iris, iris$Species)
tapply(iris, s, mean)
sapply(s, mean)
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
lapply(s, function(x) colMeans(x[ , c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[ , c("Sepal.Length","Sepal.Width")]))
